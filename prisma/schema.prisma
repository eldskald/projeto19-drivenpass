generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  id             Int      @id @default(autoincrement())
  userId         Int
  number         String   @db.VarChar(20)
  holderName     String   @db.VarChar(50)
  expirationDate String   @db.VarChar(5)
  securityCode   String
  password       String
  isVirtual      Boolean
  type           cardType
  label          String   @db.VarChar(50)
  users          users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, label])
}

model credentials {
  id       Int    @id @default(autoincrement())
  userId   Int
  url      String
  label    String @db.VarChar(50)
  password String
  credential String
  users    users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, label])
}

model documents {
  id             Int    @id @default(autoincrement())
  userId         Int
  type           documentType
  fullName       String @db.VarChar(50)
  emissionDate   String @db.VarChar(5)
  expirationDate String @db.VarChar(5)
  registryNumber String @db.VarChar(20)
  emittedBy      String @db.VarChar(50)
  users          users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notes {
  id     Int    @id @default(autoincrement())
  userId Int
  title  String @db.VarChar(50)
  note   String @db.VarChar(1000)
  users  users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, title])
}

model users {
  id          Int           @id @default(autoincrement())
  email       String        @unique @db.VarChar(50)
  password    String
  cards       cards[]
  credentials credentials[]
  documents   documents[]
  notes       notes[]
  wifis       wifis[]
}

model wifis {
  id       Int    @id @default(autoincrement())
  userId   Int
  label    String @db.VarChar(50)
  name     String @db.VarChar(50)
  password String
  users    users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum cardType {
  credit
  debit
  both
}

enum documentType {
  rg
  cnh
}
